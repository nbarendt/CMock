---
:cmock:
  :plugins:
  - # none

:systest:
  :types: |
    struct THING { int a; int b; };

    union JUNK { int a; char b; };

  :mockable: |
    void foo_struct(struct THING*, struct THING);
    void foo_union(union JUNK*, union JUNK);
    struct THING foobar_struct(void);
    union JUNK foobar_union(void);

  :source: 
    :header: |    
      void exercise_struct(struct THING* a, struct THING b);
      void exercise_union(union JUNK* a, union JUNK b);
      struct THING return_struct(void);
      union JUNK return_union(void);

    :code: |
      void exercise_struct(struct THING* a, struct THING b)
      {
        foo_struct(a, b);
      }
      
      void exercise_union(union JUNK* a, union JUNK b)
      {
        foo_union(a, b);
      }
      
      struct THING return_struct(void)
      {
        return foobar_struct();
      }
    
      union JUNK return_union(void)
      {
        return foobar_union();
      }

  :tests:
    :common: |
      struct THING struct1;
      struct THING struct2;
      struct THING struct3;
      struct THING struct4;
      struct THING struct5;
      struct THING struct6;
    
      union JUNK union1;
      union JUNK union2;
      union JUNK union3;
      union JUNK union4;
      union JUNK union5;
      union JUNK union6;

      void setUp(void)
      {
        struct1.a = 1;
        struct1.b = 2;
        
        struct2.a = 3;
        struct2.b = 4;

        struct3.a = 5;
        struct3.b = 6;

        struct4.a = 7;
        struct4.b = 8;
        
        struct5.a = 9;
        struct5.b = 10;

        struct6.a = 9;
        struct6.b = 10;

        union1.a = 1;
        union2.a = 2;
        union3.a = 3;
        union4.a = 4;
        union5.a = 5;
        union6.a = 5;
      }
      
      void tearDown(void) {}
            
    :units:
    - :pass: TRUE
      :should: 'successfully compare structs'
      :code: |
        test()
        {
          foo_struct_Expect(&struct1, struct2);
          exercise_struct(&struct1, struct2);
        }

    - :pass: FALSE
      :should: 'blow up on bad struct pointer comparison'
      :code: |
        test()
        {
          foo_struct_Expect(&struct1, struct2);
          exercise_struct(&struct3, struct2);
        }

    - :pass: FALSE
      :should: 'blow up on bad structure comparison'
      :code: |
        test()
        {
          foo_struct_Expect(&struct1, struct2);
          exercise_struct(&struct1, struct4);
        }

    - :pass: TRUE
      :should: 'compare returned structs as equal'
      :code: |
        test()
        {
          foobar_struct_ExpectAndReturn(struct5);
          TEST_ASSERT_EQUAL_THING(struct6, return_struct());
        }

    - :pass: FALSE
      :should: 'compare returned structs as unequal'
      :code: |
        test()
        {
          foobar_struct_ExpectAndReturn(struct4);
          TEST_ASSERT_EQUAL_THING(struct5, return_struct());
        }

    - :pass: TRUE
      :should: 'successfully compare unions'
      :code: |
        test()
        {
          foo_union_Expect(&union1, union2);
          exercise_union(&union1, union2);
        }

    - :pass: FALSE
      :should: 'blow up on bad union pointer comparison'
      :code: |
        test()
        {
          foo_union_Expect(&union1, union2);
          exercise_union(&union3, union2);
        }

    - :pass: FALSE
      :should: 'blow up on bad union comparison'
      :code: |
        test()
        {
          foo_union_Expect(&union1, union2);
          exercise_union(&union1, union4);
        }

    - :pass: TRUE
      :should: 'compare returned unions as equal'
      :code: |
        test()
        {
          foobar_union_ExpectAndReturn(union5);
          TEST_ASSERT_EQUAL_JUNK(union6, return_union());
        }

    - :pass: FALSE
      :should: 'compare returned unions as unequal'
      :code: |
        test()
        {
          foobar_union_ExpectAndReturn(union4);
          TEST_ASSERT_EQUAL_JUNK(union5, return_union());
        }

  :unity_helper:
    :header: |
      void AssertEqualTHINGStruct(struct THING expected, struct THING actual);
      void AssertEqualJUNKUnion(union JUNK expected, union JUNK actual);

      #define TEST_ASSERT_EQUAL_THING(expected, actual) {AssertEqualTHINGStruct(expected, actual);}
      #define TEST_ASSERT_EQUAL_JUNK(expected, actual) {AssertEqualJUNKUnion(expected, actual);}

    :code: |
      void AssertEqualTHINGStruct(struct THING expected, struct THING actual)
      {
        TEST_ASSERT_EQUAL_INT_MESSAGE(expected.a, actual.a, "actual struct member \"a\" does not equal expected");
        TEST_ASSERT_EQUAL_INT_MESSAGE(expected.b, actual.b, "actual struct member \"b\" does not equal expected");
      }

      void AssertEqualJUNKUnion(union JUNK expected, union JUNK actual)
      {
        TEST_ASSERT_EQUAL_INT_MESSAGE(expected.a, actual.a, "actual union member \"a\" does not equal expected");
        TEST_ASSERT_EQUAL_MESSAGE(expected.b, actual.b, "actual union member \"b\" does not equal expected");
      }
  
...
